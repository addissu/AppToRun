{"version":3,"sources":["components/Counter.jsx","App.js","reportWebVitals.js","index.js"],"names":["MAX_Caffeine","caffeineTotalKeys","Object","keys","coffeeDrinks","caffeineTotal","sort","originalState","numOfDrinks","currDrinkCaffeine","total","nameChange","Counter","handleDrinkChange","event","setState","Number","target","value","handleNumOfDrinksChange","handleNameChange","String","handleSubmit","preventDefault","state","handleResetClick","console","log","this","className","onSubmit","onChange","type","required","map","item","Array","idx","onClick","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iQAIMA,EAAe,IACfC,EAAoBC,OAAOC,KAAKC,EAAaC,eAAeC,OAE5DC,EAAgB,CAClBC,YAAa,EACbC,kBAAmBL,EAAaC,cAAcJ,EAAkB,IAChES,MAAO,EACPC,WAAY,IAoHDC,E,kDA/GX,aAAc,IAAD,8BACT,gBAMJC,kBAAoB,SAACC,GACjB,EAAKC,SAAU,CACXN,kBAAmBO,OAAOF,EAAMG,OAAOC,UATlC,EAabC,wBAA0B,SAACL,GACvB,EAAKC,SAAU,CACXP,YAAaQ,OAAOF,EAAMG,OAAOC,UAf5B,EAkBbE,iBAAmB,SAACN,GAChB,EAAKC,SAAU,CACXJ,WAAYU,OAAOP,EAAMG,OAAOC,UApB3B,EAwBbI,aAAe,SAACR,GACZA,EAAMS,iBACN,EAAKR,SAAS,CAACL,MAAO,EAAKc,MAAMd,MAAQ,EAAKc,MAAMf,kBAAoB,EAAKe,MAAMhB,eA1B1E,EA8BbiB,iBAAmB,WACf,EAAKV,SAAL,eAAkBR,KA7BlB,EAAKiB,MAAL,eACMjB,GAHG,E,0CAmCb,WAII,OAFAmB,QAAQC,IAAIC,KAAKJ,OAEV,sBAAKK,UAAU,SAAf,UACH,kDAEA,uBAAMC,SAAUF,KAAKN,aAArB,UACI,8CACA,uBAAOS,SAAUH,KAAKR,iBAClBY,KAAK,OACLC,UAAQ,IAIhB,0EAEI,wBAAQF,SAAUH,KAAKf,kBAAvB,SAEQZ,EAAkBiC,KAAI,SAACC,GACnB,OAAO,wBAAQjB,MAAOd,EAAaC,cAAc8B,GAA1C,SAAyFA,GAAnC/B,EAAaC,cAAc8B,SAKpG,oEAEA,wBAAQJ,SAAUH,KAAKT,wBAAvB,SACC,YAAIiB,MAAM,IAAIjC,QAAQ+B,KAAI,SAAAG,GAAG,OAC1B,wBAAQnB,MAAOmB,EAAM,EAArB,SAAuCA,EAAM,GAAhBA,EAAM,QAoBvC,wBAAQL,KAAK,SAAb,uBACA,wBAAQA,KAAK,SAASM,QAASV,KAAKH,iBAApC,sBAIJ,yCACWG,KAAKJ,MAAMb,WADtB,IACkC,uBADlC,4BAG8BiB,KAAKJ,MAAMd,MAHzC,QAKA,8BAIQkB,KAAKJ,MAAMd,MAAQV,EAAnB,mBAA8CA,EAAe4B,KAAKJ,MAAMd,MAAxE,gCAEAkB,KAAKJ,MAAMd,QAAUV,EAArB,qFAEyC4B,KAAKJ,MAAMd,MAAQV,EAF5D,gB,GAtGEuC,aCHPC,MARf,WACE,OACE,qBAAKX,UAAU,MAAf,SACE,cAAC,EAAD,OCMSY,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.bed1012c.chunk.js","sourcesContent":["import React, { Component, } from 'react';\r\nimport coffeeDrinks from '../data/coffeeDrinks.json';\r\n//console.log(coffeeDrinks)\r\n\r\nconst MAX_Caffeine = 500;\r\nconst caffeineTotalKeys = Object.keys(coffeeDrinks.caffeineTotal).sort();\r\n\r\nconst originalState = {\r\n    numOfDrinks: 1,\r\n    currDrinkCaffeine: coffeeDrinks.caffeineTotal[caffeineTotalKeys[0]],\r\n    total: 0,\r\n    nameChange: ''\r\n}\r\n\r\nclass Counter extends Component {\r\n\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n           ...originalState\r\n        }\r\n    }\r\n    //function to handle the current drink when selected\r\n    handleDrinkChange = (event) => {\r\n        this.setState ({\r\n            currDrinkCaffeine: Number(event.target.value)\r\n        })\r\n    }\r\n    //function to handle number of drinks consumed\r\n    handleNumOfDrinksChange = (event) => {\r\n        this.setState ({\r\n            numOfDrinks: Number(event.target.value)\r\n        })\r\n    }\r\n    handleNameChange = (event) => {\r\n        this.setState ({\r\n            nameChange: String(event.target.value)\r\n        })\r\n    }\r\n    //function to get current state, plus selected drink, multiplied by number of drinks \r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        this.setState({total: this.state.total + this.state.currDrinkCaffeine * this.state.numOfDrinks })\r\n        \r\n    }\r\n    //function for reset button to return to original state\r\n    handleResetClick = () => {\r\n        this.setState({...originalState})\r\n    }\r\n    \r\n    \r\n    render() {\r\n        //Shows current state \r\n        console.log(this.state)\r\n\r\n        return <div className=\"create\">\r\n            <h2>Caffeine Tracker</h2>\r\n            \r\n            <form onSubmit={this.handleSubmit}>\r\n                <label>Full Name</label>\r\n                <input onChange={this.handleNameChange}\r\n                    type=\"text\"\r\n                    required\r\n                   \r\n                />\r\n               {/*Map Json data retreiving its value of selected drink*/}\r\n            <label>Which caffeinated drink did you have?</label>\r\n            \r\n                <select onChange={this.handleDrinkChange}>\r\n                    {   \r\n                        caffeineTotalKeys.map((item) => {\r\n                            return <option value={coffeeDrinks.caffeineTotal[item]} key={coffeeDrinks.caffeineTotal[item]}>{item}</option>\r\n                          })\r\n                    }\r\n                </select>\r\n                \r\n                <label> How many drinks did you have? </label>\r\n                \r\n                <select onChange={this.handleNumOfDrinksChange}>\r\n                {[...Array(25).keys()].map(idx =>\r\n                    <option value={idx + 1} key={idx + 1}>{idx + 1}</option>\r\n)}\r\n\r\n\r\n                    {/* <option value=\"1\" >1</option>\r\n                    <option value=\"2\">2</option>\r\n                    <option value=\"3\">3</option>\r\n                    <option value=\"4\">4</option>\r\n                    <option value=\"5\">5</option>\r\n                    <option value=\"6\">6</option>\r\n                    <option value=\"7\">7</option>\r\n                    <option value=\"8\">8</option>\r\n                    <option value=\"9\">9</option>\r\n                    <option value=\"10\">10</option>\r\n                    <option value=\"11\">11</option>\r\n                    <option value=\"12\">12</option>\r\n                    <option value=\"13\">13</option> */}\r\n\r\n\r\n                </select>\r\n                <button type=\"submit\">Calculate</button>\r\n                <button type=\"button\" onClick={this.handleResetClick}>Reset</button>\r\n                \r\n            </form>\r\n            \r\n            <div>\r\n                Name: {this.state.nameChange} <br>\r\n                </br>\r\n                Current Caffeine Total:  {this.state.total}mg \r\n            </div>\r\n            <div>\r\n                {\r\n                    \r\n                    //while total is less than 500mg, this will run\r\n                    this.state.total < MAX_Caffeine ? `You have ${MAX_Caffeine - this.state.total}mg of caffeine left to drink`: \r\n                    //if total mg equalls 500, this will run\r\n                    this.state.total === MAX_Caffeine ? `You have reached your daily intake`:\r\n                    //if more than 500mg was drank, this will run\r\n                    `You have went over the daily limit by ${this.state.total - MAX_Caffeine}mg `\r\n                }  \r\n            </div>\r\n           \r\n\r\n        </div>\r\n    }\r\n}\r\n \r\nexport default Counter;","import './App.css';\nimport Counter from './components/Counter';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Counter />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}